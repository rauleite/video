{"version":3,"sources":["../../../src/modules/auth/login.js"],"names":["req","res","next","doLogin","status","respObj","hasCaptchaComponent","objCaptcha","email","body","count","countExpires","Date","now","hasCaptcha","hmgetAsync","replyCountExpires","Number","console","log","hmsetAsync","isOk","json","success","hincrbyAsync","replyIncrCount","hasCaptchaOk","del","delIsOK","error","resultSend","passport","router","Router","post","hasCorrectLoginBody","message","captchaValue","validation","validateLoginForm","errors","captcha","secretKey","captcha_secret","remoteIP","connection","remoteAddress","split","length","verificationUrl","responseCaptcha","JSON","parse","authenticate","token","userData","name","user","isFormValid","password"],"mappings":";;;;;;;;;;sEA0JO,kBAAwBA,GAAxB,EAA6BC,GAA7B,EAAkCC,IAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,O;;;;;;sEAItB,kBAA2BH,GAA3B,EAAgCC,GAAhC,EAAqCG,MAArC,EAA6CC,OAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEIA,oBAAQC,mBAAR,GAA8BD,QAAQC,mBAAR,IAA+B,KAA7D;;AAEMC,sBAJV,GAIuB;AACjBC,qBAAOR,IAAIS,IAAJ,CAASD,KADC;AAEjBE,qBAAO,CAFU;AAGjBC,4BAAcC,KAAKC,GAAL,KAAa,OAHV;AAIjBC,0BAAY;AAJK,aAJvB;AAAA;AAAA,mBAWkC,uBAAYC,UAAZ,CAAuBf,IAAIS,IAAJ,CAASD,KAAhC,EAAuC,cAAvC,CAXlC;;AAAA;AAWQQ,6BAXR;;;AAaIA,gCAAoBC,OAAOD,iBAAP,CAApB;;AAEAE,oBAAQC,GAAR,CAAY,mBAAZ,EAAiCH,iBAAjC;;AAEA;;AAjBJ,kBAkBQA,sBAAsB,CAlB9B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmByB,uBAAYI,UAAZ,CAAuBpB,IAAIS,IAAJ,CAASD,KAAhC,EAAuCD,UAAvC,CAnBzB;;AAAA;AAmBYc,gBAnBZ;;AAoBMH,oBAAQC,GAAR,CAAY,wBAAZ,EAAsCE,IAAtC;AACAH,oBAAQC,GAAR,CAAY,UAAZ,EAAwBd,OAAxB;AArBN,8CAsBaJ,IAAIG,MAAJ,CAAWA,MAAX,EAAmBkB,IAAnB,CAAwBjB,OAAxB,CAtBb;;AAAA;AAAA,kBAyBQW,oBAAoBJ,KAAKC,GAAL,EAApB,IAAkC,CAACR,QAAQkB,OAzBnD;AAAA;AAAA;AAAA;;AA0BML,oBAAQC,GAAR,CAAY,kBAAZ;AA1BN;AAAA,mBA2BmC,uBAAYK,YAAZ,CAAyBjB,WAAWC,KAApC,EAA2C,OAA3C,EAAoD,CAApD,CA3BnC;;AAAA;AA2BYiB,0BA3BZ;;AA4BMP,oBAAQC,GAAR,CAAY,gBAAZ,EAA8BM,cAA9B;;AAEA;;AA9BN,kBA+BUA,kBAAkB,CA/B5B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgCmC,uBAAYL,UAAZ,CAAuBb,WAAWC,KAAlC,EAAyC,YAAzC,EAAuD,IAAvD,CAhCnC;;AAAA;AAgCckB,wBAhCd;;AAiCQR,oBAAQC,GAAR,CAAY,qBAAZ,EAAmCO,YAAnC;AACArB,oBAAQC,mBAAR,GAA8B,IAA9B;;AAlCR;AAoCMY,oBAAQC,GAAR,CAAY,UAAZ,EAAwBd,OAAxB;AApCN,8CAqCaJ,IAAIG,MAAJ,CAAWA,MAAX,EAAmBkB,IAAnB,CAAwBjB,OAAxB,CArCb;;AAAA;;AAwCI;AACAa,oBAAQC,GAAR,CAAY,SAAZ;AAzCJ;AAAA,mBA0C0B,uBAAYQ,GAAZ,CAAgBpB,WAAWC,KAA3B,CA1C1B;;AAAA;AA0CUoB,mBA1CV;;AA2CIV,oBAAQC,GAAR,CAAY,SAAZ,EAAuBS,OAAvB;AACA;AACAvB,oBAAQC,mBAAR,GAA8B,KAA9B;AACAY,oBAAQC,GAAR,CAAY,UAAZ,EAAwBd,OAAxB;AA9CJ,8CA+CWJ,IAAIG,MAAJ,CAAWA,MAAX,EAAmBkB,IAAnB,CAAwBjB,OAAxB,CA/CX;;AAAA;AAAA;AAAA;;AAmDIa,oBAAQW,KAAR,CAAc,cAAd;AAnDJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,U;;;;;AA9Jf;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AAEA;;AAKA;;;;;;;;AAEA,IAAMC,WAAW,+CAAjB;AACA,IAAMC,SAAS,IAAI,kBAAQC,MAAZ,EAAf;;AAEAD,OAAOE,IAAP,CAAY,GAAZ;AAAA,qEAAiB,iBAAOlC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACf;AACA;AACA;AACA;AACA;AACA;AACAgB,oBAAQC,GAAR,CAAY,gBAAZ,EAA8BnB,IAAIS,IAAlC;AAPe;;AAAA,gBASR0B,oBAAoBnC,IAAIS,IAAxB,CATQ;AAAA;AAAA;AAAA;;AAUXS,oBAAQW,KAAR,CAAc,yCAAd;AAVW,6CAWJ5B,IAAIG,MAAJ,CAAW,GAAX,EAAgBkB,IAAhB,CAAqB;AAC1BC,uBAAS,KADiB;AAE1Ba,uBAAS;AAFiB,aAArB,CAXI;;AAAA;AAgBPC,wBAhBO,GAgBQrC,IAAIS,IAAJ,CAAS4B,YAhBjB;AAiBPC,sBAjBO,GAiBMC,kBAAkBvC,IAAIS,IAAtB,CAjBN;;AAAA,gBAmBR6B,WAAWf,OAnBH;AAAA;AAAA;AAAA;;AAAA,6CAoBJO,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,uBAAS,KADwB;AAEjCa,uBAASE,WAAWF,OAFa;AAGjCI,sBAAQF,WAAWE;AAHc,aAA5B,CApBI;;AAAA;AAAA;AAAA,mBA2BU,uBAAYzB,UAAZ,CAAuBf,IAAIS,IAAJ,CAASD,KAAhC,EAAuC,YAAvC,CA3BV;;AAAA;AA2BTM,sBA3BS;;AA4Bb;AACAA,yBAAaA,WAAW,CAAX,CAAb;AACAA,yBAAaA,eAAe,MAA5B;;AAEA;;AAhCa,iBAiCTA,UAjCS;AAAA;AAAA;AAAA;;AAkCXI,oBAAQC,GAAR,CAAY,qBAAZ;;AAEA;;AApCW,iBAqCP,qBAAQkB,YAAR,CArCO;AAAA;AAAA;AAAA;;AAsCTnB,oBAAQC,GAAR,CAAY,iCAAZ;;AAtCS,6CAwCFW,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,uBAAS,KADwB;AAEjCa,uBAAS,kCAFwB;AAGjCI,sBAAQ;AACNC,yBAAS;AADH;AAHyB,aAA5B,CAxCE;;AAAA;AAgDXvB,oBAAQC,GAAR,CAAY,6BAAZ;;AAEA;AACMuB,qBAnDK,GAmDO,kBAAcC,cAnDrB;AAoDPC,oBApDO,GAoDI5C,IAAI6C,UAAJ,CAAeC,aAAf,CAA6BC,KAA7B,CAAmC,GAAnC,CApDJ;;AAqDXH,uBAAWA,SAASA,SAASI,MAAT,GAAkB,CAA3B,CAAX;;AAEIC,2BAvDO,GAuDW,4DAA4DP,SAA5D,GACpB,YADoB,GACLL,YADK,GAEpB,YAFoB,GAELO,QAzDN;AAAA;AAAA,mBA2DiB,8BAAQK,eAAR,CA3DjB;;AAAA;AA2DPC,2BA3DO;;;AA6DXA,8BAAkBC,KAAKC,KAAL,CAAWF,eAAX,CAAlB;AACAhC,oBAAQC,GAAR,CAAY,iBAAZ,EAA+B+B,eAA/B;;AA9DW,gBAgENA,gBAAgB3B,OAhEV;AAAA;AAAA;AAAA;;AAAA,6CAiEFO,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,uBAAS,KADwB;AAEjCa,uBAAS,gCAFwB;AAGjCI,sBAAQ;AACNC,yBAAS;AADH;AAHyB,aAA5B,CAjEE;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AA2EbvB,oBAAQC,GAAR,CAAY,OAAZ;;AA3Ea;;AA8EfY,qBAASsB,YAAT,CAAsB,aAAtB,EAAqC,UAACxB,KAAD,EAAQyB,KAAR,EAAeC,QAAf,EAA4B;AAC/DrC,sBAAQC,GAAR,CAAY,OAAZ,EAAqBU,KAArB;AACAX,sBAAQC,GAAR,CAAY,OAAZ,EAAqBmC,KAArB;AACApC,sBAAQC,GAAR,CAAY,UAAZ,EAAwBoC,QAAxB;;AAEA,kBAAI1B,KAAJ,EAAW;AACT,oBAAIA,MAAM2B,IAAN,KAAe,2BAAnB,EAAgD;AAC9C,yBAAO1B,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,6BAAS,KADwB;AAEjCa,6BAASP,MAAMO;AAFkB,mBAA5B,CAAP;AAID;;AAED,uBAAON,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,2BAAS,KADwB;AAEjCa,2BAAS;AAFwB,iBAA5B,CAAP;AAID,eAZD,MAYO,IAAI,CAACmB,QAAL,EAAe;AACpB;AACA,uBAAOzB,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,2BAAS,KADwB;AAEjCa,2BAAS;AAFwB,iBAA5B,CAAP;AAID;;AAED,qBAAON,WAAW9B,GAAX,EAAgBC,GAAhB,EAAqB,KAArB,EAA4B;AACjCsB,yBAAS,IADwB;AAEjCa,yBAAS,oCAFwB;AAGjCkB,4BAHiC;AAIjCG,sBAAMF;AAJ2B,eAA5B,CAAP;AAMD,aA/BD,EA+BGvD,GA/BH,EA+BQC,GA/BR,EA+BaC,IA/Bb;;AA9Ee;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAAA;AAAA;AAAA;AAAA;;AAgHA;;;;;;;AAOA,SAASqC,iBAAT,CAA4BkB,IAA5B,EAAkC;AAChC,MAAMjB,SAAS,EAAf;AACA,MAAIkB,oBAAJ;AACA,MAAItB,UAAU,EAAd;;AAEAsB,gBAAc,8BAAkBD,IAAlB,EAAwBjB,MAAxB,KAAmC,iCAAqBiB,IAArB,EAA2BjB,MAA3B,CAAjD;;AAEA,MAAI,CAACkB,WAAL,EAAkB;AAChBtB,cAAU,0BAAV;AACD;;AAED,SAAO;AACLb,aAASmC,WADJ;AAELtB,oBAFK;AAGLI;AAHK,GAAP;AAKD;;AA8DD,SAASL,mBAAT,CAA8B1B,IAA9B,EAAoC;AAClC,SACE,CAAC,qBAAQA,IAAR,CAAD,IACA,CAAC,qBAAQA,KAAKD,KAAb,CADD,IAEA,CAAC,qBAAQC,KAAKkD,QAAb,CAFD,IAGA,QAAOlD,IAAP,yCAAOA,IAAP,OAAgB,QAHhB,IAIA,OAAOA,KAAKD,KAAZ,KAAsB,QAJtB,IAKA,OAAOC,KAAKkD,QAAZ,KAAyB,QAN3B;AAQD;;kBAEc3B,M;AACf","file":"login.js","sourcesContent":["import express from 'express'\nimport passportSync from 'passport'\nimport request from 'request-promise'\nimport redisClient from '../../../bin/redis-connect'\nimport { isEmpty } from 'lodash'\nimport { promisifyAll } from 'bluebird'\n\nimport {\n  emailFormValidate,\n  passwordFormValidate\n} from '../../utils'\n\nimport projectConfig from '../../../config/project.config'\n\nconst passport = promisifyAll(passportSync)\nconst router = new express.Router()\n\nrouter.post('/', async (req, res, next) => {\n  // doLogin(req, res, next)\n  // console.log('req.connection.remoteAddress', req.connection.remoteAddress)\n  // console.log('req.headers.x-forwarded-for', req.headers['x-forwarded-for'])\n  // console.log('req.headers.x-real-ip', req.headers['x-real-ip'])\n  // console.log('req.ip', req.ip)\n  // console.log('req.ips', req.ips)\n  console.log('--> auth/login', req.body)\n  try {\n    if (!hasCorrectLoginBody(req.body)) {\n      console.error('ERRO GRAVE: request body enviado errado')\n      return res.status(400).json({\n        success: false,\n        message: 'Erro no formulário. Favor preencher corretamente.'\n      })\n    }\n    const captchaValue = req.body.captchaValue\n    const validation = validateLoginForm(req.body)\n\n    if (!validation.success) {\n      return resultSend(req, res, '400', {\n        success: false,\n        message: validation.message,\n        errors: validation.errors\n      })\n    }\n\n    let hasCaptcha = await redisClient.hmgetAsync(req.body.email, 'hasCaptcha')\n    /* retorno vem null ou string representando true ou false */\n    hasCaptcha = hasCaptcha[0]\n    hasCaptcha = hasCaptcha === 'true'\n\n    /* Se nao ha captcha retorna null, quando ha retorna string do boolean */\n    if (hasCaptcha) {\n      console.log('ha captcha no redis')\n\n      /* Se ha captcha mas browser nao preencheu */\n      if (isEmpty(captchaValue)) {\n        console.log('NAO foi preenchido pelo browser')\n\n        return resultSend(req, res, '400', {\n          success: false,\n          message: 'O captcha precisa ser preenchido',\n          errors: {\n            captcha: 'O captcha precisa ser preenchido'\n          }\n        })\n      }\n      console.log('FOI preenchido pelo browser')\n\n      /* Se ha captcha e browser preencheu-o */\n      const secretKey = projectConfig.captcha_secret\n      let remoteIP = req.connection.remoteAddress.split(':')\n      remoteIP = remoteIP[remoteIP.length - 1]\n\n      let verificationUrl = 'https://www.google.com/recaptcha/api/siteverify?secret=' + secretKey +\n        '&response=' + captchaValue +\n        '&remoteip=' + remoteIP\n\n      let responseCaptcha = await request(verificationUrl)\n\n      responseCaptcha = JSON.parse(responseCaptcha)\n      console.log('responseCaptcha', responseCaptcha)\n\n      if (!responseCaptcha.success) {\n        return resultSend(req, res, '400', {\n          success: false,\n          message: 'Erro na verificação do captcha',\n          errors: {\n            captcha: 'Erro na verificação do captcha'\n          }\n        })\n      }\n    }\n  } catch (error) {\n    console.log('error', error)\n  }\n\n  passport.authenticate('local-login', (error, token, userData) => {\n    console.log('error', error)\n    console.log('token', token)\n    console.log('userData', userData)\n\n    if (error) {\n      if (error.name === 'IncorrectCredentialsError') {\n        return resultSend(req, res, '400', {\n          success: false,\n          message: error.message\n        })\n      }\n\n      return resultSend(req, res, '400', {\n        success: false,\n        message: 'Não foi possível processar o formulário.'\n      })\n    } else if (!userData) {\n      // Em tese nunca cai aqui\n      return resultSend(req, res, '400', {\n        success: false,\n        message: 'Não foi possível processar o formulário.'\n      })\n    }\n\n    return resultSend(req, res, '200', {\n      success: true,\n      message: 'Você efetuou o login, com sucesso!',\n      token,\n      user: userData\n    })\n  })(req, res, next)\n})\n\n/**\n * Validate the login form\n *\n * @param {object} payload - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n *                   errors tips, and a global message for the whole form.\n */\nfunction validateLoginForm (user) {\n  const errors = {}\n  let isFormValid\n  let message = ''\n\n  isFormValid = emailFormValidate(user, errors) && passwordFormValidate(user, errors)\n\n  if (!isFormValid) {\n    message = 'Ops, Ocorreu algum erro.'\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  }\n}\n\nexport async function doLogin (req, res, next) {\n  \n}\n\nasync function resultSend (req, res, status, respObj) {\n  try {\n    respObj.hasCaptchaComponent = respObj.hasCaptchaComponent || false\n\n    const objCaptcha = {\n      email: req.body.email,\n      count: 0,\n      countExpires: Date.now() + 3600000,\n      hasCaptcha: false\n    }\n\n    let replyCountExpires = await redisClient.hmgetAsync(req.body.email, 'countExpires')\n\n    replyCountExpires = Number(replyCountExpires)\n\n    console.log('replyCountExpires', replyCountExpires)\n\n    /* Se nao existe, cria novo */\n    if (replyCountExpires === 0) {\n      const isOk = await redisClient.hmsetAsync(req.body.email, objCaptcha)\n      console.log('replyCountExpires cria', isOk)\n      console.log('res.json', respObj)\n      return res.status(status).json(respObj)\n    }\n    /* Se expiorado OU Erro no form (eg. senha nao bate) */\n    if (replyCountExpires < Date.now() || !respObj.success) {\n      console.log('!respObj.success')\n      const replyIncrCount = await redisClient.hincrbyAsync(objCaptcha.email, 'count', 1)\n      console.log('replyIncrCount', replyIncrCount)\n\n      /* count maior que 2 */\n      if (replyIncrCount >= 2) {\n        const hasCaptchaOk = await redisClient.hmsetAsync(objCaptcha.email, 'hasCaptcha', true)\n        console.log('set hasCaptcha true', hasCaptchaOk)\n        respObj.hasCaptchaComponent = true\n      }\n      console.log('res.json', respObj)\n      return res.status(status).json(respObj)\n    }\n\n    /* Sucesso no form (senha e login ok) */\n    console.log('Tudo ok')\n    const delIsOK = await redisClient.del(objCaptcha.email)\n    console.log('delIsOK', delIsOK)\n    /* Só pra garantir */\n    respObj.hasCaptchaComponent = false\n    console.log('res.json', respObj)\n    return res.status(status).json(respObj)\n\n  /* Só entra aqui se houver erros de modulos */\n  } catch (error) {\n    console.error('ERRO GRAVE: ', error)\n    return\n  }\n}\n\nfunction hasCorrectLoginBody (body) {\n  return (\n    !isEmpty(body) &&\n    !isEmpty(body.email) &&\n    !isEmpty(body.password) &&\n    typeof body === 'object' &&\n    typeof body.email === 'string' &&\n    typeof body.password === 'string'\n  )\n}\n\nexport default router\n// module.exports = router\n"]}