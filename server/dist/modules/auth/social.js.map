{"version":3,"sources":["../../../src/modules/auth/social.js"],"names":["req","res","network","socialToken","console","log","photoSize","fields","providers","facebook","graphApiUrl","params","access_token","join","request","uri","qs","resFB","profile","JSON","parse","body","userData","name","email","statusCode","error","info","User","findOneAsync","$or","facebookId","id","user","salvaNovasProps","userLogin","token","validateWithProvider","precisaSalvarUser","facebookEmail","facebookLink","link","photo","picData","picture","data","url","user_profile","dir","_id","saveAsync","require","model","router","Router","post","hasCorrectSocialBody","status","json","success","message","authFB","resultSendSocial","errors","respObj"],"mappings":"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","file":"social.js","sourcesContent":["import express from 'express'\nimport passportSync from 'passport'\nimport { promisifyAll, promisify } from 'bluebird'\nimport { isEmpty } from 'lodash'\nimport config from '../../../config/project.config'\nimport { downloadFileAsync, PATHS } from '../../utils'\nimport { getHeaderToken } from '../../utils'\nimport { facebookAsync } from '../../strategies/utils-auth'\n\nconst User = promisifyAll(require('mongoose').model('User'))\nconst request = promisify(require('request'))\n\nconst router = new express.Router()\n\nrouter.post('/', async (req, res) => {\n  console.log('POST /social req -->', req.body)\n  if (!hasCorrectSocialBody(req.body)) {\n    console.error('ERRO GRAVE: request body enviado errado')\n    return res.status(400).json({\n      success: false,\n      message: 'Erro no formulário. Favor preencher corretamente.'\n    })\n  }\n  // Grab the social network and token\n  var network = req.body.network\n  var socialToken = req.body.socialToken\n\n  // Validate the social token with Facebook\n  const authFB = await validateWithProvider(req, res, network, socialToken)\n\n  try {\n    // Return the user data we got from Facebook\n    console.log('authFB -->', authFB)\n\n    if (authFB.token) {\n      return resultSendSocial(req, res, '200', {\n        success: true,\n        message: 'Autenticado via Facebook, com sucesso!',\n        user: authFB.userData,\n        token: authFB.token\n      })\n    } else {\n      return resultSendSocial(req, res, '400', {\n        success: false,\n        message: 'Não autenticou - Facebook!',\n        user: authFB.userData,\n        errors: null\n      })\n    }\n\n\n  } catch(error) {\n    console.error('ERRO GRAVE 1', error)\n    console.error('ERRO GRAVE 2', profile.error.message)\n    return resultSendSocial(req, res, '400', {\n      success: false,\n      message: 'Falha na Autenticacao via Facebook!',\n      user: authFB.userData\n    })\n  }\n})\n\nasync function validateWithProvider (req, res, network, socialToken) {\n  console.log('validateWithProvider()')\n  const photoSize = 200\n  const fields = [\n    'id',\n    'email',\n    'first_name',\n    'last_name',\n    'link',\n    'name',\n    `picture.width(${photoSize}).height(${photoSize})`\n  ]\n  const providers = {\n    facebook: {\n      // graphApiUrl: 'https://graph.facebook.com/me',\n      // accessTokenUrl: 'https://graph.facebook.com/v2.5/oauth/access_token',\n      graphApiUrl: 'https://graph.facebook.com/v2.9/me',\n      params: {\n        access_token: socialToken,\n        fields: fields.join(',')\n        // code: req.body.code,\n        // client_id: req.body.clientId,\n        // client_secret: config.facebook_secret,\n        // redirect_uri: req.body.redirectUri || null\n      }\n    }\n  }\n\n  try {\n    const resFB = await request({\n      uri: providers[network].graphApiUrl,\n      qs: providers[network].params\n    })\n    const profile = JSON.parse(resFB.body)\n\n    const userData = {\n      name: null,\n      email: null\n    }\n\n    if (resFB.statusCode !== 200) {\n      console.log('ERRO FACE: statusCode', resFB.statusCode)\n      if (resFB.error) console.log('ERRO FACE: social.error', resFB.error)\n      return userData\n    }\n\n    /* Verificação server-side */\n    if (getHeaderToken(req)) {\n      console.info('JÁ está autenticado')\n      return userData\n    }\n\n    /* Retorna usuario existente, ou cria um. */\n    let user = await User.findOneAsync({\n      $or: [\n        { facebookId: profile.id },\n        { email: profile.email }\n      ]\n    })\n\n    if (!user) {\n      console.log('NÃO existia usuario')\n      user = new User()\n    } else {\n      console.log('JÁ existia usuario')\n    }\n\n    const userLogin = await salvaNovasProps(user, profile)\n    console.log('userLogin', userLogin)\n    const token = await facebookAsync(userLogin)\n    console.log('token', token)\n    userData.name = user.name\n    userData.email = user.email\n    userData.token = token\n  \n    return userData\n  } catch(error) {\n    console.error('ERRO GRAVE:', error)\n    return null\n  }\n}\n\nfunction resultSendSocial(req, res, status, respObj) {\n  return res.status(status).json(respObj)\n}\n\nfunction hasCorrectSocialBody (body) {\n  return (\n    !isEmpty(body) &&\n    !isEmpty(body.network) &&\n    !isEmpty(body.socialToken) &&\n    typeof body === 'object' &&\n    typeof body.network === 'string' &&\n    typeof body.socialToken === 'string'\n  )\n}\n/**\n * Atribui dados do Facebook caso ainda não existam no usuário\n * @param {object} user usuario cadastrado\n * @param {object} profile facebook api object\n */\nasync function salvaNovasProps(user, profile) {\n  let precisaSalvarUser = false\n\n  if (!user.name) {\n    console.log('user.name -->', profile.name)\n    user.name = profile.name\n    precisaSalvarUser = true\n  }\n\n  if (!user.email) {\n    console.log('user.email -->', profile.email)\n    user.email = profile.email\n    precisaSalvarUser = true\n  }\n  if (!user.facebookEmail) {\n    console.log('user.facebookEmail -->', profile.email)\n    // user.facebookEmail = `${profile.email}_`\n    user.facebookEmail = profile.email\n    precisaSalvarUser = true\n  }\n  if (!user.facebookId) {\n    console.log('user.facebookId -->', profile.id)\n    user.facebookId = profile.id\n    precisaSalvarUser = true\n  }\n  if (!user.facebookLink) {\n    console.log('user.facebookLink -->', profile.link)\n    user.facebookLink = profile.link\n    precisaSalvarUser = true\n  }\n\n  if (!user.photo) {\n    const picData = profile.picture.data\n\n    if (picData && picData.url) {\n      console.log('1')\n      \n      await downloadFileAsync(\n        picData.url,\n        PATHS.user_profile.dir,\n        `${user._id}.jpg`\n      )\n      console.log('3')\n      \n      user.photo = `${user._id}.jpg`\n      precisaSalvarUser = true\n    }\n  }\n  if (precisaSalvarUser) {\n    console.log('Salvando...')\n    // const userModel = promisifyAll(user.save.bind(user))\n    return await user.saveAsync()\n  }\n  return user\n}\n\nexport default router\n"]}