{"version":3,"sources":["../../../src/modules/auth/reset.js"],"names":["User","require","model","router","Router","get","req","res","params","token","Error","findOne","resetPasswordToken","resetPasswordExpires","$gt","Date","now","user","status","json","success","message","toObject","name","email","post","next","hasCorrectResetBody","body","console","error","validationResult","validateResetForm","errors","passwordToken","undefined","log","password","save","data","isFormValid","confirmePassword"],"mappings":"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","file":"reset.js","sourcesContent":["import express from 'express'\nimport { isEmpty } from 'lodash'\nimport {\n  passwordFormValidate,\n  passwordAndConfirmePasswordMatchValidate \n} from '../../utils'\n\nconst User = require('mongoose').model('User')\nconst router = new express.Router()\n\nrouter.get('/:token', (req, res) => {\n  (async () => {\n    try {\n      if (!req.params.token) {\n        throw new Error('Erro Interno')\n      }\n\n      const user = await User.findOne({\n        resetPasswordToken: req.params.token,\n        resetPasswordExpires: {\n          $gt: Date.now()\n        }\n      })\n\n      if (!user) {\n        return res.status(400).json({\n          success: false,\n          message: 'A solicitação de alteração de senha expirou, favor solicitar novamente.',\n          user: {\n            token: req.params.token\n          }\n        })\n      }\n\n      const { name, email } = user.toObject()\n\n      return res.status(200).json({\n        success: true,\n        message: 'Sucesso para aleração da senha.',\n        user: {\n          name,\n          email,\n          token: req.params.token\n        }\n      })\n    } catch (error) {\n      return res.status(400).json({\n        success: false,\n        message: 'Erro Interno'\n      })\n    }\n  })()\n})\n\nrouter.post('/', (req, res, next) => {\n  if (!hasCorrectResetBody(req.body)) {\n    console.error('ERRO GRAVE: request body enviado errado')\n    return res.status(400).json({\n      success: false,\n      message: 'Erro no formulário. Favor preencher corretamente.'\n    })\n  }\n\n  const validationResult = validateResetForm(req.body)\n\n  if (!validationResult.success) {\n    return res.status(400).json({\n      success: false,\n      message: validationResult.message,\n      errors: validationResult.errors\n    })\n  }\n\n  (async () => {\n    try {\n      const passwordToken = req.body.passwordToken ? req.body.passwordToken : undefined\n\n      console.log('passwordToken', passwordToken)\n      console.log('Date.now()', Date.now())\n\n      if (!passwordToken) {\n        return res.status(400).json({\n          success: false,\n          message: 'A solicitação de alteração de senha expirou, favor solicitar novamente.'\n        })\n      }\n      console.log('1')\n\n      const user = await User.findOne({\n        resetPasswordToken: passwordToken,\n        resetPasswordExpires: { $gt: Date.now() }\n      })\n\n      if (!user) {\n        return res.status(400).json({\n          success: false,\n          message: 'A solicitação de alteração de senha expirou, favor solicitar novamente.'\n        })\n      }\n\n      user.password = req.body.password\n      user.resetPasswordToken = undefined\n      user.resetPasswordExpires = undefined\n\n      await user.save()\n\n      const { name, email } = user.toObject()\n\n      // return doLogin(req, res, next)\n\n      return res.status(200).json({\n        success: true,\n        message: 'Senha alterada com sucesso, use a nova senha para se logar.',\n        data: { name, email }\n      })\n    } catch (error) {\n      return res.status(400).json({\n        success: false,\n        message: 'Erro Interno'\n      })\n    }\n  })()\n})\n\n/**\n * Validate the login form\n *\n * @param {object} body - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n *                   errors tips, and a global message for the whole form.\n */\nfunction validateResetForm (body) {\n  const errors = {}\n  let isFormValid = true\n  let message = ''\n\n  isFormValid = (\n    passwordFormValidate(body, errors) &&\n    passwordAndConfirmePasswordMatchValidate(body, errors)\n  )\n\n  if (!isFormValid) {\n    message = 'Ops, Ocorreu algum erro.'\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  }\n}\n\nfunction hasCorrectResetBody (body) {\n  return (\n    !isEmpty(body) &&\n    !isEmpty(body.email) &&\n    !isEmpty(body.password) &&\n    !isEmpty(body.confirmePassword) &&\n    !isEmpty(body.passwordToken) &&\n    !isEmpty(body.token) &&\n    typeof body === 'object' &&\n    typeof body.email === 'string' &&\n    typeof body.password === 'string' &&\n    typeof body.confirmePassword === 'string' &&\n    typeof body.passwordToken === 'string' &&\n    typeof body.token === 'string'\n  )\n}\n\nexport default router\n// module.exports = router\n"]}