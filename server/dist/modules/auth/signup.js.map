{"version":3,"sources":["../../../src/modules/auth/signup.js"],"names":["router","Router","post","req","res","next","hasCorrectSignupBody","body","console","error","status","json","success","message","validationResult","validateSignupForm","errors","authenticate","log","name","code","email","user","isFormValid","password","module","exports"],"mappings":";;;AAEA;;;AAFA;;;;AACA;;AAEA;;;;AACA;;;;AAMA,IAAMA,SAAS,IAAI,kBAAQC,MAAZ,EAAf;;AAEAD,OAAOE,IAAP,CAAY,GAAZ,EAAiB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACnC,MAAI,CAACC,qBAAqBH,IAAII,IAAzB,CAAL,EAAqC;AACjCC,YAAQC,KAAR,CAAc,yCAAd;AACA,WAAOL,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS,KADiB;AAE1BC,eAAS;AAFiB,KAArB,CAAP;AAID;AACH,MAAMC,mBAAmBC,mBAAmBZ,IAAII,IAAvB,CAAzB;AACA,MAAI,CAACO,iBAAiBF,OAAtB,EAA+B;AAC7B,WAAOR,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS,KADiB;AAE1BC,eAASC,iBAAiBD,OAFA;AAG1BG,cAAQF,iBAAiBE;AAHC,KAArB,CAAP;AAKD;;AAED,SAAO,mBAASC,YAAT,CAAsB,cAAtB,EAAsC,UAACR,KAAD,EAAW;AACtD,QAAIA,KAAJ,EAAW;AACTD,cAAQU,GAAR,CAAY,OAAZ,EAAqBT,KAArB;AACA,UAAIA,MAAMU,IAAN,KAAe,YAAf,IAA+BV,MAAMW,IAAN,KAAe,KAAlD,EAAyD;AACvD;AACA;AACA,eAAOhB,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,KADiB;AAE1BC,mBAAS,qBAFiB;AAG1BG,kBAAQ;AACNK,mBAAO;AADD;AAHkB,SAArB,CAAP;AAOD;;AAED,aAAOjB,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,iBAAS,KADiB;AAE1BC,iBAAS;AAFiB,OAArB,CAAP;AAID;;AAED,WAAOT,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,eAAS,IADiB;AAE1BC,eAAS;AAFiB,KAArB,CAAP;AAID,GAzBM,EAyBJV,GAzBI,EAyBCC,GAzBD,EAyBMC,IAzBN,CAAP;AA0BD,CA3CD;;AA6CA;;;;;;;AAOA,SAASU,kBAAT,CAA6BO,IAA7B,EAAmC;AACjC,MAAMN,SAAS,EAAf;AACA,MAAIO,cAAc,IAAlB;AACA,MAAIV,UAAU,EAAd;;AAEAU,gBACE,6BAAiBD,IAAjB,EAAuBN,MAAvB,KACA,8BAAkBM,IAAlB,EAAwBN,MAAxB,CADA,IAEA,iCAAqBM,IAArB,EAA2BN,MAA3B,CAHF;;AAMA,MAAI,CAACO,WAAL,EAAkB;AAChBV,cAAU,8BAAV;AACD;;AAED,SAAO;AACLD,aAASW,WADJ;AAELV,oBAFK;AAGLG;AAHK,GAAP;AAKD;;AAED,SAASV,oBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SACE,CAAC,qBAAQA,IAAR,CAAD,IACA,CAAC,qBAAQA,KAAKY,IAAb,CADD,IAEA,CAAC,qBAAQZ,KAAKc,KAAb,CAFD,IAGA,CAAC,qBAAQd,KAAKiB,QAAb,CAHD,IAIA,QAAOjB,IAAP,yCAAOA,IAAP,OAAgB,QAJhB,IAKA,OAAOA,KAAKY,IAAZ,KAAqB,QALrB,IAMA,OAAOZ,KAAKc,KAAZ,KAAsB,QANtB,IAOA,OAAOd,KAAKiB,QAAZ,KAAyB,QAR3B;AAUD;;AAED;AACAC,OAAOC,OAAP,GAAiB1B,MAAjB","file":"signup.js","sourcesContent":["import express from 'express'\nimport { isEmpty } from 'lodash'\n// import validator from 'validator'\nimport passport from 'passport'\nimport {\n  nameFormValidate,\n  emailFormValidate,\n  passwordFormValidate\n} from '../../utils'\n\nconst router = new express.Router()\n\nrouter.post('/', (req, res, next) => {\n  if (!hasCorrectSignupBody(req.body)) {\n      console.error('ERRO GRAVE: request body enviado errado')\n      return res.status(400).json({\n        success: false,\n        message: 'Erro no formulário. Favor preencher corretamente.'\n      })\n    }\n  const validationResult = validateSignupForm(req.body)\n  if (!validationResult.success) {\n    return res.status(400).json({\n      success: false,\n      message: validationResult.message,\n      errors: validationResult.errors\n    })\n  }\n\n  return passport.authenticate('local-signup', (error) => {\n    if (error) {\n      console.log('ERROR', error)\n      if (error.name === 'MongoError' && error.code === 11000) {\n        // the 11000 Mongo code is for a duplication email error\n        // the 409 HTTP status code is for conflict error\n        return res.status(409).json({\n          success: false,\n          message: 'Ocorreu algum erro.',\n          errors: {\n            email: 'Este email já existe, você pode se logar usando-o.'\n          }\n        })\n      }\n\n      return res.status(400).json({\n        success: false,\n        message: 'Erro interno ao tentar processar o cadastro.'\n      })\n    }\n\n    return res.status(200).json({\n      success: true,\n      message: 'Seu cadastro foi realizado com sucesso, agora pode fazer o login.'\n    })\n  })(req, res, next)\n})\n\n/**\n * Validate the sign up form\n *\n * @param {object} user - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n *                   errors tips, and a global message for the whole form.\n */\nfunction validateSignupForm (user) {\n  const errors = {}\n  let isFormValid = true\n  let message = ''\n\n  isFormValid = (\n    nameFormValidate(user, errors) &&\n    emailFormValidate(user, errors) &&\n    passwordFormValidate(user, errors)\n  )\n\n  if (!isFormValid) {\n    message = 'Ops, ocorreu algum equívoco.'\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  }\n}\n\nfunction hasCorrectSignupBody (body) {\n  return (\n    !isEmpty(body) &&\n    !isEmpty(body.name) &&\n    !isEmpty(body.email) &&\n    !isEmpty(body.password) &&\n    typeof body === 'object' &&\n    typeof body.name === 'string' &&\n    typeof body.email === 'string' &&\n    typeof body.password === 'string'\n  )\n}\n\n// export default router\nmodule.exports = router\n"]}