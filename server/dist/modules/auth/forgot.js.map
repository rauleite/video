{"version":3,"sources":["../../../src/modules/auth/forgot.js"],"names":["User","promisifyAll","model","router","Router","post","req","res","next","console","log","body","hasCorrectForgotBody","error","status","json","success","message","validationResult","validateForgotForm","errors","randomBytesAsync","buf","token","toString","findOneAsync","email","user","Error","resetPasswordToken","resetPasswordExpires","Date","now","save","smtpTransport","createTransport","service","secureConnection","auth","pass","email_pass","data","sendMail","promisify","bind","mailOptions","payload","isFormValid","from","to","subject","text","headers","host","module","exports"],"mappings":"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","file":"forgot.js","sourcesContent":["import express from 'express'\nimport crypto from 'crypto'\nimport nodemailer from 'nodemailer'\nimport config from '../../../config/project.config'\nimport mongoose from 'mongoose'\nimport Promise from 'bluebird'\nimport { isEmpty } from 'lodash'\n// import asyncUtils from '../../../utils/asyncUtils'\nimport { emailFormValidate } from '../../utils'\n\n/* Promisify some methods */\nconst User = Promise.promisifyAll(mongoose).model('User')\nPromise.promisifyAll(crypto)\n\nconst router = new express.Router()\n\nrouter.post('/', async (req, res, next) => {\n  console.log('--> auth/forgot', req.body)\n\n  if (!hasCorrectForgotBody(req.body)) {\n    console.error('ERRO GRAVE: request body enviado errado')\n    return res.status(400).json({\n      success: false,\n      message: 'Erro no formulário. Favor preencher corretamente.'\n    })\n  }\n\n  const validationResult = validateForgotForm(req.body)\n  if (!validationResult.success) {\n    return res.status(400).json({\n      success: false,\n      message: validationResult.message,\n      errors: validationResult.errors\n    })\n  }\n  try {\n    const buf = await crypto.randomBytesAsync(20)\n\n    const token = buf.toString('hex')\n\n    const user = await User.findOneAsync({ email: req.body.email })\n\n    if (!user) throw new Error('Nenhuma conta encontrada com este email')\n\n    user.resetPasswordToken = token\n    user.resetPasswordExpires = Date.now() + 3600000 // 1 hour\n\n    await user.save()\n\n    const smtpTransport = nodemailer.createTransport({\n      service: 'Gmail',\n      // host: 'smtp.gmail.com',\n      // port: 465,\n      secureConnection: false,\n      auth: {\n        user: config.email,\n        pass: config.email_pass\n      }\n    })\n    console.log('passou nodemailer criou object e retornando sucesso')\n    res.status(200).json({\n      success: true,\n      message: 'Estamos enviando o procedimento ao seu endereço de email, dê uma olhadinha.',\n      data: {\n        email: user.email\n      }\n    })\n\n    const sendMail = Promise.promisify(smtpTransport.sendMail.bind(smtpTransport))\n    await sendMail(mailOptions(user, req, token))\n    console.log('nodemailer mandou email')\n  } catch (error) {\n    return res.status(400).json({\n      success: false,\n      message: 'O email informado não consta em nossa base.'\n    })\n  }\n})\n\n/**\n * Validate the logout form\n *\n * @param {object} payload the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n * errors tips, and a global message for the whole form.\n */\nfunction validateForgotForm (payload) {\n  const errors = {}\n  let isFormValid = true\n  let message = ''\n\n  isFormValid = emailFormValidate(payload, errors, isFormValid)\n\n  if (!isFormValid) {\n    message = 'Há algo errado.'\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  }\n}\n\nfunction mailOptions (user, req, token) {\n  return {\n    from: config.email,\n    to: user.email,\n    subject: 'Melhore.me - Resete sua senha',\n    text: `\n      Você recebeu este email, porque você (ou alguém) solicitou que a senha de sua conta seja resetada.\n\n      Para completar o processo, por favor clique no seguinte link, ou cole em seu browser:\n\n      https://${req.headers.host}/reset/${token}\n\n      Caso você não tenha feito esta solicitação, por favor ignore este email. Assim, sua senha permanecerá inalterada.\n    `\n  }\n}\n\nfunction hasCorrectForgotBody (body) {\n  return (\n    !isEmpty(body) &&\n    !isEmpty(body.email) &&\n    typeof body === 'object' &&\n    typeof body.email === 'string'\n  )\n}\n\n// export default router\nmodule.exports = router\n"]}