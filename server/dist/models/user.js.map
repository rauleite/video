{"version":3,"sources":["../../src/models/user.js"],"names":["bcrypt","require","UserSchema","Schema","email","type","String","index","unique","password","resetPasswordToken","resetPasswordExpires","Date","hasCaptchaComponent","Boolean","name","validToken","validTokenExpires","Number","facebookId","facebookLink","facebookEmail","photo","methods","comparePassword","console","log","compareSync","bcryptResult","error","pre","saveHook","next","user","isModified","genSalt","saltError","salt","hash","hashError","module","exports","model"],"mappings":";;AAAA;;;;AACA;;;;;;AACA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA;;AAEA;AACA,IAAMC,aAAa,IAAI,mBAASC,MAAb,CAAoB;AACrCC,SAAO;AACLC,UAAMC,MADD;AAELC,WAAO,EAAEC,QAAQ,IAAV;AAFF,GAD8B;AAKrCC,YAAUH,MAL2B;AAMrCI,sBAAoBJ,MANiB;AAOrCK,wBAAsBC,IAPe;AAQrCC,uBAAqBC,OARgB;AASrCC,QAAMT,MAT+B;AAUrCU,cAAYV,MAVyB;AAWrCW,qBAAmBC,MAXkB;AAYrCC,cAAYb,MAZyB;AAarCc,gBAAcd,MAbuB;AAcrCe,iBAAef,MAdsB;AAerCgB,SAAOhB;AAf8B,CAApB,CAAnB;;AAkBA;;;;;;AAMAJ,WAAWqB,OAAX,CAAmBC,eAAnB;AAAA,qEAAqC,iBAAgBf,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACnCgB,oBAAQC,GAAR,CAAY,sBAAZ,EAAoCjB,QAApC,EAA8C,MAA9C,EAAsD,IAAtD,EAA4D,KAAKA,QAAjE;;AAEA;AACA;AACA;AACA;AACA;AACA;;AARmC;AAAA;AAAA,mBAWNT,OAAO2B,WAAP,CAAmBlB,QAAnB,EAA6B,KAAKA,QAAlC,CAXM;;AAAA;AAW3BmB,wBAX2B;;AAYjCH,oBAAQC,GAAR,CAAY,uBAAZ,EAAqCjB,QAArC;AAZiC,6CAa1BmB,YAb0B;;AAAA;AAAA;AAAA;;AAejCH,oBAAQI,KAAR,CAAc,aAAd;AAfiC,6CAgB1B,KAhB0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAoBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA3B,WAAW4B,GAAX,CAAe,MAAf,EAAuB,SAASC,QAAT,CAAmBC,IAAnB,EAAyB;AAC9C,MAAMC,OAAO,IAAb;;AAEA;AACA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOF,MAAP;;AAElC,SAAOhC,OAAOmC,OAAP,CAAe,UAACC,SAAD,EAAYC,IAAZ,EAAqB;AACzC,QAAID,SAAJ,EAAe;AACb,aAAOJ,KAAKI,SAAL,CAAP;AACD;;AAED,WAAOpC,OAAOsC,IAAP,CAAYL,KAAKxB,QAAjB,EAA2B4B,IAA3B,EAAiC,UAACE,SAAD,EAAYD,IAAZ,EAAqB;AAC3D,UAAIC,SAAJ,EAAe;AACb,eAAOP,KAAKO,SAAL,CAAP;AACD;;AAED;AACAN,WAAKxB,QAAL,GAAgB6B,IAAhB;;AAEA,aAAON,MAAP;AACD,KATM,CAAP;AAUD,GAfM,CAAP;AAgBD,CAtBD;;AAwBAQ,OAAOC,OAAP,GAAiB,mBAASC,KAAT,CAAe,MAAf,EAAuBxC,UAAvB,CAAjB","file":"user.js","sourcesContent":["import mongoose from 'mongoose'\nimport { promisifyAll } from 'bluebird'\nconst bcrypt = require('bcrypt')\n// const bcrypt = promisifyAll(require('bcrypt-nodejs'))\n\n// define the User model schema\nconst UserSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    index: { unique: true }\n  },\n  password: String,\n  resetPasswordToken: String,\n  resetPasswordExpires: Date,\n  hasCaptchaComponent: Boolean,\n  name: String,\n  validToken: String,\n  validTokenExpires: Number,\n  facebookId: String,\n  facebookLink: String,\n  facebookEmail: String,\n  photo: String\n})\n\n/**\n * Compare the passed password with the value in the database. A model method.\n *\n * @param {string} password\n * @returns {object} callback\n */\nUserSchema.methods.comparePassword = async function (password) {\n  console.log('local-login password', password, 'this', this, this.password)\n\n  // TODO:\n  // IF this.password === undefined\n  // AND loop (social networks).id === not empty\n  // SO Warning: Você escolheu fazer login pelo facebook\n  // porém pode criar uma senha a qualquer momento e efetuar\n  // o login através destas duas opções\n\n  try {\n    const bcryptResult = await bcrypt.compareSync(password, this.password)\n    console.log('local-login password2', password)\n    return bcryptResult\n  } catch (error) {\n    console.error('ERRO GRAVE:', error)\n    return false\n  }\n}\n\n// UserSchema.methods.comparePassword = function (password) {\n//   console.log('local-login password', password, 'this', this, this.password)\n//   const bcryptResult = bcrypt.compare(password, this.password)\n//   console.log('local-login password2', password)\n//   return bcryptResult\n// }\n\n/**\n * The pre-save hook method.\n */\nUserSchema.pre('save', function saveHook (next) {\n  const user = this\n\n  // proceed further only if the password is modified or the user is new\n  if (!user.isModified('password')) return next()\n\n  return bcrypt.genSalt((saltError, salt) => {\n    if (saltError) {\n      return next(saltError)\n    }\n\n    return bcrypt.hash(user.password, salt, (hashError, hash) => {\n      if (hashError) {\n        return next(hashError)\n      }\n\n      // replace a password string with hash value\n      user.password = hash\n\n      return next()\n    })\n  })\n})\n\nmodule.exports = mongoose.model('User', UserSchema)\n"]}