{"version":3,"sources":["../src/utils.js"],"names":["token","verifyJwt","jwt_secret","decoded","console","log","userId","sub","User","findById","user","dateNow","getDateNowFormartNormalizer","validToken","validTokenExpires","addBlankValidToken","Error","error","verifyAuthentication","save","bind","zeraValidToken","url","destDir","destFile","cb","createDir","file","createWriteStream","request","get","response","pipe","on","close","unlink","dest","downloadFile","ensureDir","ensure","nameFormValidate","emailFormValidate","passwordFormValidate","passwordAndConfirmePasswordMatchValidate","validateEmail","getHeaderToken","require","model","verify","PATHS","user_profile","dir","userInfo","username","errors","validateName","name","email","length","body","password","validatePassword","confirmePassword","trim","names","split","re","RegExp","join","test","req","headers","authorization","timeExpires","Math","round","Date","now","downloadFileAsync"],"mappings":"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","file":"utils.js","sourcesContent":["import { promisifyAll, promisify } from 'bluebird'\nimport jwt from 'jsonwebtoken'\nimport config from '../config/project.config'\nimport mongoose from 'mongoose'\nimport https from 'https'\nimport fs from 'fs-extra'\n\n/* Promisify some methods */\nconst User = promisifyAll(require('mongoose').model('User'))\nconst verifyJwt = promisifyAll(jwt.verify)\n// const findById = promisifyAll(User.findById.bind(User))\n\nexport const PATHS = {\n  user_profile: {\n    dir: `/home/${require(\"os\").userInfo().username}/user_profile/picture`\n  }\n}\n\n/**\n * Altera o objeto errors adicionando mensagem a propriedade name\n * @param {object} user\n * @param {object} errors\n */\nexport function nameFormValidate (user, errors) {\n  console.log('nameFormValidate()')\n  if (!validateName(user.name)) {\n    console.error('ERRO GRAVE: Email vazio')\n    errors.name = 'Erro no formulário. Preencha corretamente.'\n    return false\n  }\n  return true\n}\n\n/**\n * Altera o objeto errors adicionando mensagem a propriedade email\n * @param {object} user\n * @param {object} errors\n */\nexport function emailFormValidate (user, errors) {\n  console.log('emailFormValidate()')\n  if (user.email.length === 0) {\n    console.error('ERRO GRAVE: Email vazio')\n    errors.email = 'Erro no formulário. Preencha corretamente.'\n    return false\n  }\n\n  if (!validateEmail(user.email)) {\n    console.error('ERRO GRAVE: Email não validado')\n    errors.email = 'Erro no formulário. Preencha corretamente.'\n    return false\n  }\n\n  return true\n}\n\n/**\n * Altera o objeto errors adicionando mensagem a propriedade email\n * @param {object} payload\n * @param {object} errors\n */\nexport function passwordFormValidate (body, errors) {\n  console.log('passwordFormValidate()')\n  if (body.password.length < 8) {\n    console.error('ERRO GRAVE: A senha deve ter pelo menos 8 dígitos.')\n    errors.password = 'Erro no formulário. Preencha corretamente.'\n    return false\n  }\n\n  if (!validatePassword(body.password)) {\n    console.error('ERRO GRAVE: Senha não validada')\n    errors.password = 'Erro no formulário. Preencha corretamente.'\n    return false\n  }\n\n  return true\n}\n\n/**\n * Is password and confirmePassword matches?\n * @param {string} password\n * @param {string} confirmePassword \n */\nexport function passwordAndConfirmePasswordMatchValidate (body, errors) {\n  console.log('passwordAndConfirmePasswordMatchValidate()')\n  if (body.password !== body.confirmePassword) {\n    console.error('ERRO GRAVE: Senha e confirmação não batem')\n    errors.password = 'Erro no formulário. Preencha corretamente.'\n    return false\n  }\n  return true\n}\n\n/**\n * Mínimo tem que ser 2 nomes com 2 digitos (eg. 'Ab Cd')\n * @param {string} name\n */\nfunction validateName (name) {\n  if (name) {\n    name = name.trim()\n    const names = name.split(' ')\n    return names.length >= 2 && names[0].length >= 2 && names[1].length >= 2\n  } else {\n    return false\n  }\n}\n\n/**\n * Valida o email\n * @param {string} email email em questão\n */\nexport function validateEmail (email) {\n  var re = new RegExp([\n    '^(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\"]+)*)|',\n    '(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}])|',\n    '(([a-zA-Z\\\\-0-9]+\\\\.)+[a-zA-Z]{2,}))$'\n  ].join(''))\n  return re.test(email)\n}\n\n/**\n * Valida o password\n * @param {string} password senha em questão\n */\nfunction validatePassword (password) {\n  var re = /\\s/\n  return !re.test(password)\n}\n\n/**\n * Retorna o token contido no header, se existir\n * @param {object} req http req\n */\nexport function getHeaderToken (req) {\n  return req.headers.authorization ? req.headers.authorization.split(' ')[1] : null\n}\n\n/**\n * Verifica se está autenticado\n * @param {string} token authentication token\n */\nexport async function verifyAuthentication (token) {\n  try {\n    const decoded = await verifyJwt(token, config.jwt_secret)\n    console.log('decoded', decoded)\n    const userId = decoded.sub\n\n    // check if a user exists\n    const user = await User.findById(userId)\n    const dateNow = getDateNowFormartNormalizer()\n\n    if (!user || user.validToken !== token) {\n      console.log('Não teve autorização, deve retornar STATUS 401')\n      return null\n    }\n\n    /* Defensive block. Never should be enter in this if */\n    if (dateNow > user.validTokenExpires) {\n      try {\n        addBlankValidToken(user)\n        throw new Error('Esse ponto soh um Defensive block')\n      } catch (error) {\n        console.error('ERRO GRAVE', error)\n      }\n      return null\n    }\n\n    console.log('B')\n    return user\n  } catch (error) {\n    console.log('ERRO GRAVE:', error)\n    return null\n  }\n}\n\n/**\n * Persiste string vazia no atributo de usuario, para invalidar qualquer token\n * @param {object} user\n */\nexport async function addBlankValidToken (user) {\n  const save = promisify(user.save.bind(user))\n  try {\n    user.validToken = ''\n    user.validTokenExpires = 0\n    return await save()\n  } catch (error) {\n    console.error('ERRO GRAVE:', error)\n    return null\n  }\n}\n\n/**\n * Zera o atributo validToken. Orquestra a verificacao de auth e adiciona blankValidToken\n * @param {string} token\n */\nexport async function zeraValidToken (token) {\n  const user = await verifyAuthentication(token)\n  if (!user) {\n    console.log('sem usuario no retorno do verifyAuthentication()')\n    return null\n  }\n  return addBlankValidToken(user, (error, user) => {\n    if (error) console.error('ERRO GRAVE:', error)\n    return user\n  })\n}\n\n/**\n * Return Date now in seconds, like jwt expires format\n * @param {number} timeExpires optional - plus in timeExpires\n */\nexport function getDateNowFormartNormalizer (timeExpires = 0) {\n  /* divides by 1000 to make format like jwt.exp seconds format */\n  return Math.round((Date.now() / 1000) + (timeExpires))\n}\n\n/**\n * Download Web File\n * @param {string} url url para download\n * @param {string} destDir nome do diretorio de destino no sistema\n * @param {string} destFile nome do arquivo de destino\n * @param {function} cb callback\n */\nexport async function downloadFile (url, destDir, destFile, cb) {\n  try {\n    await createDir(destDir)\n  } catch (error) {\n    console.log('ERRO GRAVE:', error)\n  }\n  let file = fs.createWriteStream(`${destDir}/${destFile}`)\n  \n  let request = https.get(url, (response) => {\n    response.pipe(file)\n    file.on('finish', () => {\n      /* close() is async, call cb after close completes. */\n      file.close(cb)\n    })\n  }).on('error', (error) => {\n    /* Delete the file async. (But we don't check the result) */\n    fs.unlink(dest)\n    if (cb) cb(error);\n  })\n}\n\nexport const downloadFileAsync = promisify(downloadFile)\n\nasync function createDir (destDir, cb) {\n  const ensure = await fs.ensureDir(destDir)\n}\n"]}