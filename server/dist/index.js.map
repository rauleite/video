{"version":3,"sources":["../src/index.js"],"names":["debug","app","enable","use","json","urlencoded","extended","initialize","require","disable","redisClient","limiter","path","method","total","expire","lookup","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;AACA;;AAEA,IAAMA,QAAQ,qBAAI,oBAAJ,CAAd;AACA,IAAMC,MAAM,wBAAZ;;AAEA;AACAA,IAAIC,MAAJ,CAAW,aAAX,EAA0B,IAA1B;AACAD,IAAIC,MAAJ,CAAW,aAAX,EAA0B,UAA1B;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,qBAAWC,IAAX,EAAR;AACAH,IAAIE,GAAJ,CAAQ,qBAAWE,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;;AAEA;AACAL,IAAIE,GAAJ,CAAQ,mBAASI,UAAT,EAAR;;AAEAC,QAAQ,mBAAR,EAA6BP,GAA7B;;AAEA;AACA,mBAASE,GAAT,CAAa,cAAb,EAA6BK,QAAQ,2BAAR,CAA7B;AACA,mBAASL,GAAT,CAAa,aAAb,EAA4BK,QAAQ,0BAAR,CAA5B;;AAEA;;AAEAP,IAAIQ,OAAJ,CAAY,cAAZ;;AAEA,IAAMC,cAAcF,QAAQ,sBAAR,CAApB;AACA,IAAMG,UAAUH,QAAQ,iBAAR,EAA2BP,GAA3B,EAAgCS,WAAhC,CAAhB;;AAEA;;AAEA;AACAC,QAAQ;AACNC,QAAM,GADA;AAENC,UAAQ,KAFF;AAGNC,SAAO,EAHD;AAINC,UAAQ,OAAO,EAAP,GAAY,CAJd;AAKNC,UAAQ;AALF,CAAR;;AAQA;AACAL,QAAQ;AACNC,QAAM,GADA;AAENC,UAAQ,MAFF;AAGNC,SAAO,CAHD;AAINC,UAAQ,OAAO,CAJT;AAKNC,UAAQ;AALF,CAAR;;AASA;AACAR,QAAQ,sBAAR,EAAgCP,GAAhC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAgB,OAAOC,OAAP,GAAiBjB,GAAjB","file":"index.js","sourcesContent":["import 'babel-polyfill'\nimport 'babel-core/register'\nimport express from 'express'\nimport log from 'debug'\nimport path from 'path'\nimport project from '../config/project.config'\nimport bodyParser from 'body-parser'\nimport passport from 'passport'\n// import localSignupStrategy from './strategies/local-signup'\n// import localLoginStrategy from './strategies/local-login'\n\nconst debug = log('app:bin:dev-server')\nconst app = express()\n\n/* Para uso de informacoes do proxy, como ler headers, para o limit-express */\napp.enable('trust proxy', true)\napp.enable('trust proxy', 'loopback')\n\n// tell the app to parse HTTP body messages\napp.use(bodyParser.json())\napp.use(bodyParser.urlencoded({ extended: true }))\n\n/* pass the passport middleware */\napp.use(passport.initialize())\n\nrequire('../bin/dev-server')(app)\n\n/* load passport strategies */\npassport.use('local-signup', require('./strategies/local-signup'))\npassport.use('local-login', require('./strategies/local-login'))\n\n// app.use(express.static(project.paths.public()))\n\napp.disable('x-powered-by')\n\nconst redisClient = require('../bin/redis-connect')\nconst limiter = require('express-limiter')(app, redisClient)\n\n/* Prevent's DDOs attack */\n\n/* Max de 75 req por 5 minutos - media de 1 req a cada 4 segundos */\nlimiter({\n  path: '*',\n  method: 'all',\n  total: 75,\n  expire: 1000 * 60 * 5,\n  lookup: 'ip'\n})\n\n/* Max de 1 req a cada 2 segundos */\nlimiter({\n  path: '*',\n  method: 'post',\n  total: 1,\n  expire: 1000 * 2,\n  lookup: 'ip'\n})\n\n\n// routes\nrequire('./modules/all-routes')(app)\n\n// This rewrites all routes requests to the root /index.html file\n// (ignoring file requests). If you want to implement universal\n// rendering, you'll want to remove this middleware.\n// app.use('*', function (req, res, next) {\n//   const filename = path.join(compiler.outputPath, 'index.html')\n//   compiler.outputFileSystem.readFile(filename, (err, result) => {\n//     if (err) {\n//       return next(err)\n//     }\n//     res.set('content-type', 'text/html')\n//     res.send(result)\n//     res.end()\n//   })\n// })\n\nmodule.exports = app\n"]}