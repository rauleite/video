{"version":3,"sources":["../../src/strategies/utils-auth.js"],"names":["email","password","done","userData","trim","User","findOneAsync","user","err","Error","name","comparePassword","isMatch","error","createToken","console","login","signup","facebook","require","model","facebookAsync","req","newUser","body","save","log","timeExpires","token","sign","sub","_id","jwt_secret","expiresIn","validToken","validTokenExpires"],"mappings":";;;;;;;;qEASO,iBAAsBA,KAAtB,EAA6BC,QAA7B,EAAuCC,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,oBADD,GACY;AACfH,qBAAOA,MAAMI,IAAN,EADQ;AAEfH,wBAAUA,SAASG,IAAT;AAFK,aADZ;AAAA;AAAA,mBAMcC,KAAKC,YAAL,CAAkB,EAAEN,OAAOG,SAASH,KAAlB,EAAlB,CANd;;AAAA;AAMCO,gBAND;AAAA;;AAAA,gBASEA,IATF;AAAA;AAAA;AAAA;;AAUKC,eAVL,GAUW,IAAIC,KAAJ,CAAU,oCAAV,CAVX;;AAWDD,gBAAIE,IAAJ,GAAW,2BAAX;;AAXC,6CAaMR,KAAKM,GAAL,CAbN;;AAAA;AAAA;AAAA,mBAgBmBD,KAAKI,eAAL,CAAqBR,SAASF,QAA9B,CAhBnB;;AAAA;AAgBGW,mBAhBH;;AAAA,gBAiBEA,OAjBF;AAAA;AAAA;AAAA;;AAkBKC,iBAlBL,GAkBa,IAAIJ,KAAJ,CAAU,oCAAV,CAlBb;;AAmBDI,kBAAMH,IAAN,GAAa,2BAAb;;AAnBC,6CAqBMR,KAAKW,KAAL,CArBN;;AAAA;;AAwBHC,wBAAYP,IAAZ,EAAkBL,IAAlB;AACA;AAzBG;AAAA;;AAAA;AAAA;AAAA;;AA2BHa,oBAAQF,KAAR,CAAc,OAAd;;AA3BG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,K;;;;;QA+BNC,M,GAAAA,M;QAiBAC,Q,GAAAA,Q;;AAzDhB;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMb,OAAO,4BAAac,QAAQ,UAAR,EAAoBC,KAApB,CAA0B,MAA1B,CAAb,CAAb;;AAEO,IAAMC,wCAAgB,yBAAUH,QAAV,CAAtB;;AAiCA,SAASD,MAAT,CAAiBK,GAAjB,EAAsBtB,KAAtB,EAA6BC,QAA7B,EAAuCC,IAAvC,EAA6C;AAClD,MAAMqB,UAAU,IAAIlB,IAAJ,CAAS;AACvBL,WAAOA,MAAMI,IAAN,EADgB;AAEvBH,cAAUA,SAASG,IAAT,EAFa;AAGvBM,UAAMY,IAAIE,IAAJ,CAASd,IAAT,CAAcN,IAAd;AAHiB,GAAT,CAAhB;;AAMAmB,UAAQE,IAAR,CAAa,UAACZ,KAAD,EAAW;AACtBE,YAAQW,GAAR,CAAYb,KAAZ;AACA,QAAIA,KAAJ,EAAW;AACT,aAAOX,KAAKW,KAAL,CAAP;AACD;;AAED,WAAOX,KAAK,IAAL,CAAP;AACD,GAPD;AAQD;;AAEM,SAASgB,QAAT,CAAmBX,IAAnB,EAAyBL,IAAzB,EAA+B;AACpCY,cAAYP,IAAZ,EAAkBL,IAAlB;AACD;;AAED,SAASY,WAAT,CAAsBP,IAAtB,EAA4BL,IAA5B,EAAkC;AAChCa,UAAQW,GAAR,CAAY,eAAZ;AACA;AACA;AACA,MAAMC,cAAc,EAApB;;AAGA;AACA,MAAMC,QAAQ,uBAAIC,IAAJ,CACZ,EAAEC,KAAKvB,KAAKwB,GAAZ,EADY,EAEZ,kBAAOC,UAFK,EAGZ,EAAEC,WAAWN,WAAb,EAHY,CAAd;;AAMApB,OAAK2B,UAAL,GAAkBN,KAAlB;AACArB,OAAK4B,iBAAL,GAAyB,wCAA4BR,WAA5B,CAAzB;AACApB,OAAKkB,IAAL,CAAU,iBAAS;AACjB,QAAIZ,KAAJ,EAAW;AACTE,cAAQF,KAAR,CAAc,gCAAd,EAAgDA,KAAhD;AACAX,WAAKW,KAAL;AACA;AACD;AACF,GAND;;AAQAX,OAAK,IAAL,EAAW0B,KAAX,EAAkB,EAAElB,MAAMH,KAAKG,IAAb,EAAlB;AACA;AACD","file":"utils-auth.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport config from '../../config/project.config'\nimport { getDateNowFormartNormalizer } from '../utils'\nimport { promisify, promisifyAll } from 'bluebird'\n\nconst User = promisifyAll(require('mongoose').model('User'))\n\nexport const facebookAsync = promisify(facebook)\n\nexport async function login (email, password, done) {\n  const userData = {\n    email: email.trim(),\n    password: password.trim()\n  }\n\n  const user = await User.findOneAsync({ email: userData.email })\n\n  try {\n    if (!user) {\n      const err = new Error('Você digitou login ou senha errado')\n      err.name = 'IncorrectCredentialsError'\n\n      return done(err)\n    }\n    \n    const isMatch = await user.comparePassword(userData.password)\n    if (!isMatch) {\n      const error = new Error('Você digitou login ou senha errado')\n      error.name = 'IncorrectCredentialsError'\n\n      return done(error)\n    }\n\n    createToken(user, done)\n    // return done(null, token, { name: user.name })\n  } catch (error) {\n    console.error('ERRO:', error)\n  }\n}\n\nexport function signup (req, email, password, done) {\n  const newUser = new User({\n    email: email.trim(),\n    password: password.trim(),\n    name: req.body.name.trim()\n  })\n\n  newUser.save((error) => {\n    console.log(error)\n    if (error) {\n      return done(error)\n    }\n\n    return done(null)\n  })\n}\n\nexport function facebook (user, done) {\n  createToken(user, done)\n}\n\nfunction createToken (user, done) {\n  console.log('criando token')\n  /* 7 dias (sec, min, hour, day) */\n  // const timeExpires = 60 * 60 * 24 * 7\n  const timeExpires = 60\n\n\n  // create a token string\n  const token = jwt.sign(\n    { sub: user._id },\n    config.jwt_secret,\n    { expiresIn: timeExpires }\n  )\n\n  user.validToken = token\n  user.validTokenExpires = getDateNowFormartNormalizer(timeExpires)\n  user.save(error => {\n    if (error) {\n      console.error('ERRO GRAVE: - token.validToken', error)\n      done(error)\n      return\n    }\n  })\n\n  done(null, token, { name: user.name })\n  return\n}\n"]}